框架介绍：

1、自定义Application；

2、使用MVP模式；
对Presenter和Callback进行了封装，对onError等一些情况进行统一处理；
Presenter和Callback的交互有一套基本的生命周期；

3、
可以结合Retrofit和Rxjava实现网络请求；
也可以使用其它网络请求框架；

但是针对不同的网络请求框架需要在BasePresenter和BaseCallback的基础上实现自己的Presenter和Callback，
需要适当调整基本的生命周期方法调用的位置，达到正确的效果，参考RxCallback和BaseHucCallback；
也可以增加自己的生命周期方法，比如RxCallback里就增加了onSubscribe和onComplete两个生命周期方法；

在框架之外的主工程中，可以在BaseCallback的基础上实现自己的Callback类，对返回的数据先进行一些统一的处理，
因为一般一个项目返回的数据外层结构都一样，比如最外层的第一个key是code，200表示成功，就可以在自己实现的类里进行统一处理不是200的情况；
同时也因为不同的项目返回的数据结构可能不一样（比如一个项目返回的数据结构第一个key是code，另一个项目的第一个key却是error），
所以不能把这个进行统一处理的类放在框架里面；

4、网络请求返回的数据的格式问题
返回的数据格式可以是其他格式的吗，比如xml？
可以，与json数据原理相同，xml数据传给callback时泛型写成String，或者自己解析成bean类之后再传给callback。
网络请求是不影响MVP各层之间的交互的，因为理论上它只存在于Model层。

5、同一个页面上有多个请求的情况，使用了同一个Callback，避免需要实现很多接口，重写很多方法，
   使用标记（BaseTag和它的子类）来区分是哪个请求的回调；

6、常用工具类；

7、Callback不只适用于请求网络，也适用于数据库等本地耗时操作，甚至非耗时操作。TODO 本地操作如果结果不是String，而是实体类呢？？？已解决

8、上传和下载等情况还没有处理；

9、沉浸式状态栏工具类；


基本使用步骤：
1、框架作为主工程的类库(library)使用；
2、根据本次项目服务器返回的数据的结构，写一个抽象类继承BaseCallback或者RxCallback类，
重写onDealNextResponse方法，如果需要对返回的数据进行统一处理，可以在这个方法里进行，
添加新的抽象方法，比如onNextSuccess和onNextFailure；
//下面的步骤以在Activity中请求一次网络为例
3、创建一个Activity继承BaseActivity，会自动重写几个方法，
在Activity中写一个自定义的Callback类继承第二步的抽象类，重写4个方法；
4、在Presenter层创建Activity页面对应的Presenter；
5、在Activity里适当的地方，比如在initDatas里，调用bindPresenter方法，把Presenter和Callback联系起来；
6、在Presenter里写需要写的方法，在每个方法里首先要调用preCheck（父类里已经写好的）方法；
7、在Activity里调用Presenter里的方法，在Callback里接收结果；


